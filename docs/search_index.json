[
["index.html", "What They Forgot to Teach You About R WTF 0.1 In-person workshops 0.2 How to search within this book", " What They Forgot to Teach You About R Jennifer Bryan, Jim Hester WTF 0.1 In-person workshops The impetus for developing and assembling these materials is a two-day hands-on workshop. It is designed for experienced R and RStudio users who want to (re)design their R lifestyle. We focus on building holistic and project-oriented workflows that address the most common sources of friction in data analysis, outside of doing the statistical analysis itself. Warning: these materials absolutely do not constitute a self-contained ‚Äúbook‚Äù, nor do they capture all workshop content. But it is useful to us to organize and share certain excerpts in this format. Repo that makes this site: https://github.com/jennybc/what-they-forgot Past and future offerings: rstudio::conf 2018, San Diego, CA Seattle, WA, 2018 October 4 &amp; 5 at The Westin Seattle REGISTRATION OPEN rstudio::conf 2019, Austin, TX, on 2019 January 15 &amp; 16 training days. REGISTRATION OPEN The workshops typically include substantial components that draw on other materials, such as: Happy Git and GitHub for the useR Iterating well with the purrr package purrr tutorial from Jenny Bryan Row-oriented workflows in R with the tidyverse, originally an RStudio webinar 0.1.1 Seattle 2018 October 4 &amp; 5 At The Westin Seattle (links to Google maps). Register here. Basic schedule 8:00 - 9:00 Breakfast (coffee, tea, water remain available to us all day) 9:00 - 10:30 Work session 1 10:30 - 11:00 Break 11:00 - 12:30 Work session 2 12:30 - 1:30 Lunch 1:30 - 3:00 Work session 3 3:00 - 3:30 Break 3:30 - 5:00 Work session 4 5:15 - 6:05 ‚ÄúOffice hours‚Äù, day 1 only!, sign up for 10 min slots w/ an instructor 0.2 How to search within this book move this somewhere less ridiculous when said place exists I always forget this, so I‚Äôm recording it here. From the bookdown book: The second button on the toolbar is the search button. Its keyboard shortcut is F (Find). When the button is clicked, you will see a search box at the top of the sidebar. As you type in the box, the TOC will be filtered to display the sections that match the search keyword. Now you can use the arrow keys Up/Down to highlight the next keyword on the current page. When you click the search button again (or hit F outside the search box), the search keyword will be emptied and the search box will be hidden. For the Up/Down arrow navigation to work, remember to leave the cursor in the search box. What They Forgot to Teach You About R by Jennifer Bryan, Jim Hester is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],
["projects-and-blank-slates.html", "Chapter 1 Projects and blank slates 1.1 Notes for refinement 1.2 Project-oriented workflow 1.3 Workflow versus Product 1.4 Self-contained projects 1.5 Use of a development environment 1.6 What‚Äôs wrong with setwd()? 1.7 Use projects and the here package 1.8 RStudio Projects 1.9 What‚Äôs wrong with rm(list = ls())?", " Chapter 1 Projects and blank slates 1.1 Notes for refinement Think of R processes as livestock, not pets. Mine this for anything not already included: http://stat545.com/block002_hello-r-workspace-wd-project.html Ditto this: http://r4ds.had.co.nz/workflow-projects.html. Especially the screenshots re: RStudio config. Image from workflow talk shows having many R/RStudio instances open at once, all in different projects. https://speakerdeck.com/jennybc/zen-and-the-art-of-workflow-maintenance?slide=44 1.2 Project-oriented workflow Originally published as a blog post: https://www.tidyverse.org/articles/2017/12/workflow-vs-script/ I was honored to speak this week at the IASC-ARS/NZSA Conference, hosted by the Stats Department at The University of Auckland. One of the conference themes is to celebrate the accomplishments of Ross Ihaka, who got R started back in 1992, along with Robert Gentleman. My talk included advice on setting up your R life to maximize effectiveness and reduce frustration. Two specific slides generated much discussion and consternation in #rstats Twitter: If the first line of your R script is setwd(&quot;C:\\Users\\jenny\\path\\that\\only\\I\\have&quot;) I will come into your office and SET YOUR COMPUTER ON FIRE üî•. If the first line of your R script is rm(list = ls()) I will come into your office and SET YOUR COMPUTER ON FIRE üî•. I stand by these strong opinions, but on their own, threats to commit arson aren‚Äôt terribly helpful! Here I explain why these habits can be harmful and may be indicative of an awkward workflow. Feel free to discuss more on community.rstudio.com. Caveat: only you can decide how much you care about this. The importance of these practices has a lot to do with whether your code will be run by other people, on other machines, and in the future. If your current practices serve your purposes, then go forth and be happy. 1.3 Workflow versus Product Let‚Äôs make a distinction between things you do because of personal taste and habits (‚Äúworkflow‚Äù) versus the logic and output that is the essence of your project (‚Äúproduct‚Äù). These are part of your workflow: The editor you use to write your R code. The name of your home directory. The R code you ran before lunch. I consider these to be clearly product: The raw data. The R code someone needs to run on your raw data to get your results, including the explicit library() calls to load necessary packages. Ideally, you don‚Äôt hardwire anything about your workflow into your product. Workflow-related operations should be executed by you interactively, using whatever means is appropriate to your setup, but not built into the scripts themselves. 1.4 Self-contained projects I suggest organizing each data analysis into a project: a folder on your computer that holds all the files relevant to that particular piece of work. I‚Äôm not assuming this is an RStudio Project, though this is a nice implementation discussed below. Any resident R script is written assuming that it will be run from a fresh R process with working directory set to the project directory. It creates everything it needs, in its own workspace or folder, and it touches nothing it did not create. For example, it does not install additional packages (another pet peeve of mine). This convention guarantees that the project can be moved around on your computer or onto other computers and will still ‚Äújust work‚Äù. I argue that this is the only practical convention that creates reliable, polite behavior across different computers or users and over time. This convention is neither new, nor unique to R. It‚Äôs like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety. 1.5 Use of a development environment You will notice that the workflow recommendations given here are easier to implement if you use an IDE (integrated development environment). RStudio is a great example (what I use today), but there are many others, including: Emacs + ESS (what I used for ~15 years before RStudio), vim + Nvim-R, Visual Studio + RTVS. Direction of causality: long-time coders don‚Äôt organize their work into self-contained projects and use relative paths because they use an IDE. They use an IDE because it makes it easier to follow standard practices, such as these. 1.6 What‚Äôs wrong with setwd()? I run a lot of student code in STAT 545 and, at the start, I see a lot of R scripts that look like this: library(ggplot2) setwd(&quot;/Users/jenny/cuddly_broccoli/verbose_funicular/foofy/data&quot;) df &lt;- read.delim(&quot;raw_foofy_data.csv&quot;) p &lt;- ggplot(df, aes(x, y)) + geom_point() ggsave(&quot;../figs/foofy_scatterplot.png&quot;) The chance of the setwd() command having the desired effect ‚Äì making the file paths work ‚Äì for anyone besides its author is 0%. It‚Äôs also unlikely to work for the author one or two years or computers from now. The project is not self-contained and portable. To recreate and perhaps extend this plot, the lucky recipient will need to hand edit one or more paths to reflect where the project has landed on their machine. When you do this for the 73rd time in 2 days, while marking an assignment, you start to fantasize about lighting the perpetrator‚Äôs computer on fire. This use of setwd() is also highly suggestive that the useR does all of their work in one R process and manually switches gears when they shift from one project to another. That sort of workflow makes it unpleasant to work on more than one project at a time and also makes it easy for work done on one project to accidentally leak into subsequent work on another (e.g., objects, loaded packages, session options). 1.7 Use projects and the here package How can you avoid setwd() at the top of every script? Organize each logical project into a folder on your computer. Make sure the top-level folder advertises itself as such. This can be as simple as having an empty file named .here. Or, if you use RStudio and/or Git, those both leave characteristic files behind that will get the job done. Use the here() function from the here package to build the path when you read or write a file. Create paths relative to the top-level directory. Whenever you work on this project, launch the R process from the project‚Äôs top-level directory. If you launch R from the shell, cd to the correct folder first. To continue our example, start R in the foofy directory, wherever that may be. Now the code looks like so: library(ggplot2) library(here) df &lt;- read.delim(here(&quot;data&quot;, &quot;raw_foofy_data.csv&quot;)) p &lt;- ggplot(df, aes(x, y)) + geom_point() ggsave(here(&quot;figs&quot;, &quot;foofy_scatterplot.png&quot;)) This will run, with no edits, for anyone who follows the convention about launching R in the project folder. In fact, it will even work if R‚Äôs working directory is anywhere inside the project, i.e. it will work from sub-folders. This plays well with knitr/rmarkdown‚Äôs default behavior around working directory and in package development/checking workflows. Read up on the here package to learn about more features, such as additional ways to mark the top directory and troubleshooting with dr_here(). I have also written a more detailed paean to this package before. 1.8 RStudio Projects This work style is so crucial that RStudio has an official notion of a Project (with a capital ‚ÄúP‚Äù). You can designate a new or existing folder as a Project. All this means is that RStudio leaves a file, e.g., foofy.Rproj, in the folder, which is used to store settings specific to that project. Double-click on a .Rproj file to open a fresh instance of RStudio, with the working directory and file browser pointed at the project folder. The here package is aware of this and the presence of an .Rproj is one of the ways it recognizes the top-level folder for a project. RStudio fully supports Project-based workflows, making it easy to switch from one to another, have many projects open at once, re-launch recently used Projects, etc. 1.9 What‚Äôs wrong with rm(list = ls())? It‚Äôs also fairly common to see data analysis scripts that begin with this object-nuking command: rm(list = ls()) Just like hard-wiring the working directory, this is highly suggestive that the useR works in one R process and manually switches gears when they shift from one project to another. That, in turn, suggests that development frequently happens in a long-running R process that has been used vs. fresh and clean. The problem is that rm(list = ls()) does NOT, in fact, create a fresh R process. All it does is delete user-created objects from the global workspace. Many other changes to the R landscape persist invisibly and can have profound effects on subsequent development. Any packages that have been loaded are still available. Any options that have been set to non-default values remain that way. Working directory is not affected (which is, of course, why we see setwd() so often here too!). Why does this matter? It makes your script vulnerable to hidden dependencies on things you ran in this R process before you executed rm(list = ls()). You might use functions from a package without including the necessary library() call. Your collaborator won‚Äôt be able to run this script. You might code up an analysis assuming that stringsAsFactors = FALSE but next week, when you have restarted R, everything will inexplicably be broken. You might write paths relative to some random working directory, then be puzzled next month when nothing can be found or results don‚Äôt appear where you expect. The solution is to write every script assuming it will be run in a fresh R process. How do you adopt this style? Key steps: User-level setup: Do not save .RData when you quit R and don‚Äôt load .RData when you fire up R. In RStudio, this behavior can be requested in the General tab of Preferences. If you run R from the shell, put something like this in your .bash_profile: alias R='R --no-save --no-restore-data'. Don‚Äôt do things in your .Rprofile that affect how R code runs, such as loading a package like dplyr or ggplot or setting an option such as stringsAsFactors = FALSE. Daily work habit: Restart R very often and re-run your under-development script from the top. If you use RStudio, use the menu item Session &gt; Restart R or the associated keyboard shortcut Ctrl+Shift+F10 (Windows and Linux) or Command+Shift+F10 (Mac OS). You can re-run all code up to the current line with Ctrl+Alt+B (Windows and Linux) or Command+Option+B (Mac OS). If you run R from the shell, use Ctrl+D to quit, then R to restart. This requires that you fully embrace the idea that source is real: The source code is real. The objects are realizations of the source code. Source for EVERY user modified object is placed in a particular directory or directories, for later editing and retrieval. ‚Äì from the ESS manual This doesn‚Äôt mean that your scripts need to be perfectly polished and ready to run unattended on a remote server. Scripts can be messy, anticipating interactive execution, but still be complete. Clean them up when and if you need to. What about objects that take a long time to create? Isolate that bit in its own script and write the precious object to file with saveRDS(my_precious, here(&quot;results&quot;, &quot;my_precious.rds&quot;)). Now you can develop scripts to do downstream work that reload the precious object via my_precious &lt;- readRDS(here(&quot;results&quot;, &quot;my_precious.rds&quot;)). It is a good idea to break data analysis into logical, isolated pieces anyway. Lastly, rm(list = ls()) is hostile to anyone that you ask to help you with your R problems. If they take a short break from their own work to help debug your code, their generosity is rewarded by losing all of their previous work. Now granted, if your helper has bought into all the practices recommended here, this is easy to recover from, but it‚Äôs still irritating. When this happens for the 100th time in a semester, it rekindles the computer arson fantasies triggered by last week‚Äôs fiascos with setwd(). "],
["how-to-name-files.html", "Chapter 2 How to name files", " Chapter 2 How to name files Convert content from these slides https://speakerdeck.com/jennybc/how-to-name-files "],
["practice-safe-paths.html", "Chapter 3 Practice safe paths", " Chapter 3 Practice safe paths Adapt from https://github.com/jennybc/here_here#readme. Include some coverage of fs. "],
["get-to-know-your-r-installation.html", "Chapter 4 Get to know your R installation", " Chapter 4 Get to know your R installation R version, where the executable lives. Study your package library. "],
["r-startup.html", "Chapter 5 R startup", " Chapter 5 R startup Explain the concept of dotfiles, in general. Special considerations around seeing them and editing them, in different OSes, in RStudio. usethis helpers. What happens when R starts up. .Rprofile, .Renviron What‚Äôs safe / typical to configure, e.g. reprex is OK, dplyr is not OK. Maintaining your library in ‚Äúuser space‚Äù is a good connection to ‚Äúmaintaining your R installation‚Äù. Why and how do most people do this? Namespaces and conflicts, the conflicted package GitHub PAT is good example of something we could put in .Renviron as an activity. "],
["upgrading-r.html", "Chapter 6 Upgrading R", " Chapter 6 Upgrading R Typical patterns for upgrading R and your installed packages en masse. "],
["setup-an-r-dev-environment.html", "Chapter 7 Setup an R dev environment", " Chapter 7 Setup an R dev environment System prep necessary to install R packages from source. In fact, what is a source package vs a binary? http://stat545.com/packages01_system-prep.html Certain sections and graphics from here: http://r-pkgs.had.co.nz/package.html "],
["install-a-source-package.html", "Chapter 8 Install a source package", " Chapter 8 Install a source package How to isolate and experiment with a single package. The world beyond plain usage of install.packages(). Install from source Install from any version Install from GitHub Install to temporary library (some old Jenny notes https://gist.github.com/jennybc/4ffc1607d07ed3b025dc) At least mention ‚Ä¶ fork, clone, and work with it directly. A connection to Happy Git. "],
["local-and-immediate-debugging.html", "Chapter 9 Local and immediate debugging", " Chapter 9 Local and immediate debugging browser() traceback() options(error = recover) Gabe once shared a method of debugging Rmd: https://gist.github.com/gmbecker/e47b0951b91505b2f4607259bcec8f97. Interesting example of options(error = recover). "],
["read-the-source.html", "Chapter 10 Read the source", " Chapter 10 Read the source How to use GitHub search (of code, commits, issues) to shed light on your problem. The lookup package. "],
["reproduce-the-problem.html", "Chapter 11 Reproduce the problem", " Chapter 11 Reproduce the problem Before you seek outside help, strive to nail down your problem with this level of rigor: You can reliably induce it, with minimal setup and fuss. To the point where others can reproduce it. Discuss ‚Äúbisect‚Äù as a useful mentality, applied to lines of code / functions or across versions. Link out to reprex stuff re: mechanics of sharing. "],
["references.html", "References", " References "]
]
